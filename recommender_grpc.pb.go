// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: recommender.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RecommenderBaseComment_AddComment_FullMethodName                       = "/main.RecommenderBaseComment/AddComment"
	RecommenderBaseComment_UpdateComment_FullMethodName                    = "/main.RecommenderBaseComment/UpdateComment"
	RecommenderBaseComment_DeleteComment_FullMethodName                    = "/main.RecommenderBaseComment/DeleteComment"
	RecommenderBaseComment_LisRecommendedProductIDsByUserID_FullMethodName = "/main.RecommenderBaseComment/LisRecommendedProductIDsByUserID"
)

// RecommenderBaseCommentClient is the client API for RecommenderBaseComment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecommenderBaseCommentClient interface {
	AddComment(ctx context.Context, in *CommentReq, opts ...grpc.CallOption) (*NonQueryResponse, error)
	UpdateComment(ctx context.Context, in *CommentReq, opts ...grpc.CallOption) (*NonQueryResponse, error)
	DeleteComment(ctx context.Context, in *DeleteCommentReq, opts ...grpc.CallOption) (*NonQueryResponse, error)
	LisRecommendedProductIDsByUserID(ctx context.Context, in *RecommentReq, opts ...grpc.CallOption) (*RecommentRes, error)
}

type recommenderBaseCommentClient struct {
	cc grpc.ClientConnInterface
}

func NewRecommenderBaseCommentClient(cc grpc.ClientConnInterface) RecommenderBaseCommentClient {
	return &recommenderBaseCommentClient{cc}
}

func (c *recommenderBaseCommentClient) AddComment(ctx context.Context, in *CommentReq, opts ...grpc.CallOption) (*NonQueryResponse, error) {
	out := new(NonQueryResponse)
	err := c.cc.Invoke(ctx, RecommenderBaseComment_AddComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommenderBaseCommentClient) UpdateComment(ctx context.Context, in *CommentReq, opts ...grpc.CallOption) (*NonQueryResponse, error) {
	out := new(NonQueryResponse)
	err := c.cc.Invoke(ctx, RecommenderBaseComment_UpdateComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommenderBaseCommentClient) DeleteComment(ctx context.Context, in *DeleteCommentReq, opts ...grpc.CallOption) (*NonQueryResponse, error) {
	out := new(NonQueryResponse)
	err := c.cc.Invoke(ctx, RecommenderBaseComment_DeleteComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommenderBaseCommentClient) LisRecommendedProductIDsByUserID(ctx context.Context, in *RecommentReq, opts ...grpc.CallOption) (*RecommentRes, error) {
	out := new(RecommentRes)
	err := c.cc.Invoke(ctx, RecommenderBaseComment_LisRecommendedProductIDsByUserID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecommenderBaseCommentServer is the server API for RecommenderBaseComment service.
// All implementations must embed UnimplementedRecommenderBaseCommentServer
// for forward compatibility
type RecommenderBaseCommentServer interface {
	AddComment(context.Context, *CommentReq) (*NonQueryResponse, error)
	UpdateComment(context.Context, *CommentReq) (*NonQueryResponse, error)
	DeleteComment(context.Context, *DeleteCommentReq) (*NonQueryResponse, error)
	LisRecommendedProductIDsByUserID(context.Context, *RecommentReq) (*RecommentRes, error)
	mustEmbedUnimplementedRecommenderBaseCommentServer()
}

// UnimplementedRecommenderBaseCommentServer must be embedded to have forward compatible implementations.
type UnimplementedRecommenderBaseCommentServer struct {
}

func (UnimplementedRecommenderBaseCommentServer) AddComment(context.Context, *CommentReq) (*NonQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddComment not implemented")
}
func (UnimplementedRecommenderBaseCommentServer) UpdateComment(context.Context, *CommentReq) (*NonQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (UnimplementedRecommenderBaseCommentServer) DeleteComment(context.Context, *DeleteCommentReq) (*NonQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedRecommenderBaseCommentServer) LisRecommendedProductIDsByUserID(context.Context, *RecommentReq) (*RecommentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LisRecommendedProductIDsByUserID not implemented")
}
func (UnimplementedRecommenderBaseCommentServer) mustEmbedUnimplementedRecommenderBaseCommentServer() {
}

// UnsafeRecommenderBaseCommentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecommenderBaseCommentServer will
// result in compilation errors.
type UnsafeRecommenderBaseCommentServer interface {
	mustEmbedUnimplementedRecommenderBaseCommentServer()
}

func RegisterRecommenderBaseCommentServer(s grpc.ServiceRegistrar, srv RecommenderBaseCommentServer) {
	s.RegisterService(&RecommenderBaseComment_ServiceDesc, srv)
}

func _RecommenderBaseComment_AddComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommenderBaseCommentServer).AddComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommenderBaseComment_AddComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommenderBaseCommentServer).AddComment(ctx, req.(*CommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommenderBaseComment_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommenderBaseCommentServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommenderBaseComment_UpdateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommenderBaseCommentServer).UpdateComment(ctx, req.(*CommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommenderBaseComment_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommenderBaseCommentServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommenderBaseComment_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommenderBaseCommentServer).DeleteComment(ctx, req.(*DeleteCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommenderBaseComment_LisRecommendedProductIDsByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommenderBaseCommentServer).LisRecommendedProductIDsByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommenderBaseComment_LisRecommendedProductIDsByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommenderBaseCommentServer).LisRecommendedProductIDsByUserID(ctx, req.(*RecommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RecommenderBaseComment_ServiceDesc is the grpc.ServiceDesc for RecommenderBaseComment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecommenderBaseComment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.RecommenderBaseComment",
	HandlerType: (*RecommenderBaseCommentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddComment",
			Handler:    _RecommenderBaseComment_AddComment_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _RecommenderBaseComment_UpdateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _RecommenderBaseComment_DeleteComment_Handler,
		},
		{
			MethodName: "LisRecommendedProductIDsByUserID",
			Handler:    _RecommenderBaseComment_LisRecommendedProductIDsByUserID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recommender.proto",
}
